<div id="post" class="mt-5 m-2">

  <div class="toolbar mb-2 flex justify-between items-center">
    <div class="flex space-x-2">
      <button class="px-4 py-2 rounded-md" id="bold-button">
        <strong>B</strong>
      </button>
    </div>
    <div class="text-sm text-gray-600" id="char-count">0 / 1000</div>
  </div>

  <%= form_with(model: @micropost, url: draft_update_path(slug: @user.slug, id: @micropost.id), method: :patch, local: true, html: { class: "micropost-form" }) do |f| %>
    <div class="field">
      <%= f.text_area :content, 
        id: "editor",
        class: "mt-2 p-4 rounded border shadow-md hover:shadow-lg transition-shadow duration-300 flex items-center w-full h-40",
        style: "min-height: 100px; overflow-y: auto;" %>
    </div>

    <div class="actions text-right mt-2">
      <button
        class="px-4 py-2 bg-gray-200 text-gray-500 border border-gray-300 
               rounded-md cursor-not-allowed
               disabled:hover:bg-gray-200 disabled:opacity-50"
        disabled>
        🤖AI
      </button>

      <button class="hover:bg-yellow-500 px-4 py-2 bg-gray-100 border border-gray-300 text-gray-700 
                     hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 
                     focus:ring-gray-300 rounded-md">
        <%= link_to "📸 手書きを読み取る", camera_path(@user), class: "submit-button text-dark text-decoration-none" %>
      </button>

      <%= f.submit "📝 下書き保存", name: "draft", class: "hover:bg-yellow-500 px-4 py-2 bg-gray-200 border border-gray-300 text-gray-800 
                 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 
                 focus:ring-gray-400 rounded-md" %>

      <%= f.submit "post", class: "hover:bg-yellow-500 px-4 py-2 bg-gray-200 border border-gray-300 text-gray-800 
                 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 
                 focus:ring-gray-400 rounded-md" %>
    </div>
  <% end %>

  <style>
    [data-placeholder]:empty::before {
      content: attr(data-placeholder);
      color: #aaa;
      pointer-events: none;
    }
  </style>

</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const editor = document.getElementById('editor');
    const boldButton = document.getElementById('bold-button');
    const charCount = document.getElementById('char-count');
    const MAX_CHARS = 1000;

    if (!editor) {
      console.warn('Editor not found. Exiting script.');
      return;
    }

    // 文字数カウントの更新
    function updateCharCount() {
      const text = editor.value || "";
      const currentCount = text.length;

      if (currentCount > MAX_CHARS) {
        charCount.textContent = `${MAX_CHARS} / ${MAX_CHARS}`;
        charCount.classList.add('text-red-500');
        editor.value = text.substring(0, MAX_CHARS); // 超過部分を削除
      } else {
        charCount.textContent = `${currentCount} / ${MAX_CHARS}`;
        charCount.classList.remove('text-red-500');
      }
    }

    // Bボタンのクリックイベント
  boldButton.addEventListener('click', function(event) {
  event.preventDefault();
  const selection = window.getSelection();
  if (selection.rangeCount > 0) {
    const range = selection.getRangeAt(0);
    const span = document.createElement('span');
    span.style.fontWeight = 'bold'; // 太字スタイルを適用
    span.appendChild(range.extractContents());
    range.insertNode(span);
  }
  syncContent();
  updateCharCount();
});


    // 編集内容を隠しフィールドに同期
    function syncContent() {
      if (editor) {
        const hiddenContent = document.getElementById('hidden_content');
        if (hiddenContent) {
          hiddenContent.value = editor.innerHTML; // エディタの内容を隠しフィールドに反映
        }
      }
    }

    // エディタの入力イベント
    editor.addEventListener('input', function () {
      updateCharCount();
      syncContent();
    });

    // 初期カウントの設定
    updateCharCount();
  });
</script>
